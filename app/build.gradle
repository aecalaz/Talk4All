import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "cc.echonet.coolmicapp"
        versionCode 6
        versionName "1.0.2"

        minSdkVersion 16
        targetSdkVersion 25

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GIT_REVISION", "\"${gitRevision()}\""
        buildConfigField "String", "GIT_BRANCH", "\"${gitBranch()}\""
        buildConfigField "String", "GIT_AUTHOR", "\"${gitAuthor()}\""
        buildConfigField "String", "GIT_DIRTY", "\"${gitDirty()}\""
        buildConfigField "String", "BUILD_TS", "\"${buildTimeStamp()}\""

        // `return void` removes the lint error: `Not all execution paths return a value`.
        return void
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}

def gitRevision() {
    try {
        return "git rev-parse HEAD".execute().text.trim()
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

def gitBranch() {
    try {
        return "git rev-parse --symbolic-full-name HEAD".execute().text.trim()
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

def gitAuthor() {
    try {
        return "git --no-pager show -s --format=\"%aN <%aE>\" HEAD".execute().text.trim()
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

def gitDirty() {
    try {
        if ("git status --porcelain".execute().text.trim().isEmpty()) {
            return "false"
        } else {
            return "true"
        }
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

def buildTimeStamp() {
    try {
        def df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z") //you can change it
        df.setTimeZone(TimeZone.getTimeZone("UTC"))
        return df.format(new Date())
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

dependencies {
    compile 'com.android.support:support-v4:25.1.0'
    compile 'com.google.zxing:android-integration:3.2.1'
    androidTestCompile 'com.android.support:support-annotations:25.1.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    // Optional -- Hamcrest library
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'

}
